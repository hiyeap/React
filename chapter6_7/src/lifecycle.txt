*lifecycle(수명주기)
모든 리액트 컴포넌트는 라이프사이클이 존재하고
수명은 페이지에 렌더링되기 전에 시작하여 페이지에서 사라질 때 끝

* 라이프사이클 메서드
컴포넌트를 처음으로 렌더링할 때 어던 작업을 처리해야 하거나
컴포넌트를 업데이트하기 전후로 어떤 작업을 처리하거나
불필요한 업데이트를 방지해야할 때 사용

클래스형 컴포넌트에서만 사용가능
함수 컴포넌트에서는 Hooks 기능으로 비슷한 작업가능

Will : 어떤 작업을 작동하기 전에 실행
Did : 어떤 작업을 작동한 후에 실행

* 마운트 : DOM이 생성되고 웹 브라우저 상에 나타나는 것

* 마운트할 때 호출하는 메서드
1. 컴포넌트 만들기 
-> 2. constructor  : 컴포넌트를 새로 만들 때마다 호출되는 생성자
-> 3. getDerivedStateFormProps   : props에 있는 값을 state에 넣을 때 사용
-> 4. render : 준비한 UI를 렌더링
-> 5. componentDidMount : 컴포넌트가 웹 브라우저 상에 나타난 후 호출

* 업데이트
1. props가 바뀔 때
2. state가 바뀔 때
3. 부모 컴포넌트가 리렌더링될 때
4. this.forceUpdate로 강제로 렌더링을 트리거할 때

* 업데이트할 때 호출하는 메서드
1. 업데이트를 발생시키는 요인(props 변경, state 변경, 부모 컴포넌트 리렌더링)
-> 2. getDerivedStateFormProps : props의 변화에 따라 state 값에도 변화를 주고 싶을 때
-> 3. shouldComponentUpdate : 컴포넌트가 리렌더링을 할지 말지 결정(true값을 반환하면 다음 라이프사이클 메서드를 계속 실행, false를 반환하면 작업을 중지)
-> 4. render : 컴포넌트를 리렌더링
-> 5. getSnapshotBeforeUpdate : 컴포넌트의 변화를 DOM에 반영하기 바로 직전에 호출
-> 6. componentDidUpdate : 컴포넌트의 업데이트 작업이 끝난 후

* 언마운트 : 컴포넌트에서 DOM에서 제거하는 것

* 언마운트할 때 호출하는 메서드
1. 언마운트하기
2. componentWillUnmount : 컴포넌트가 웹 브라우저상에서 사라지기 전에 호출